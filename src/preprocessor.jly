local preprocess -> (lines, def, source)
    local ret = {}
    local macros = {}
    local defined = {}
    for i, line in ipairs(lines)
        if (string.sub(line, 1, 2) == '-/')
            local act, args = string.match(line, '\\-/(%w+)%s+([%w%s%p]*)')
            if (act == 'include')

            elseif (act == 'note')
                local msg = "NOTE: {source}:({i}) - {args}"
                info(msg, true)
            elseif (act == 'if')

            elseif (act == 'ifnot')

            elseif (act == 'error')
            local errStr = "{source}:({i}) - {args}"
            err(errStr)
            elseif (act == 'end')

            elseif (act == 'macro')
                local mname, margs, mbody = string.match(string.trim(args), '([%w_]+)%s*<([%w%p%s]*)>%s*([%w%p%s]+)')
                local infoStr = "macro {mname} with arguments <{margs}>"
                info(infoStr)
                margs = string.split(margs, ',')
                for i, v in ipairs(margs) margs[i] = string.trim(v) end
                if (macros[mname])
                    local errStr = "macros redefinition: {source}:{i} - {mname}"
                    err(errStr)
                end
                macros[mname] = {args = margs, body = mbody}
            else
                local errStr = "unknown preprocessor directive {act}"
                err(errStr)
            end
        else
            table.insert(ret, line)
        end
    end

    local text = table.concat(ret, '\n')
    for macro, v in pairs(macros)
        local search = "!{macro}%%s*([%%w%%p%%s]*)
        local replacer -> ()
        text = string.gsub(text, search)
    end
    print(text)
end